<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>AutoThread Attributes Sample: Demonstrates the Use of CAtlAutoThreadModule</title></head><body><h1>AutoThread Attributes Sample: Demonstrates the Use of CAtlAutoThreadModule</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The AutoThread sample demonstrates using <b>CAtlAutoThreadModule</b>. The server is implemented in the Server.exe file. The module of the EXE is derived from <b>CAtlAutoThreadModule </b>instead of <b>CAtlModule</b>.</p><p>The AutoThread sample is the nonattributed version of this sample.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">To build and run this sample</h1><div id="procedureSection0" class="section"><ol><li><p>Open the solution file AutoThread.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>. This will build and register the client and the server.</p></li><li><p>Start two instances of the ActiveX Control Test Container. See <MSHelp:link keywords="626867CF-FE53-4C30-8973-55BB93EF3917" tabindex="0" >Testing Properties and Events with Test Container</MSHelp:link> for information on how to access the test container.</p></li><li><p>Insert one of the client controls (CAutoCtl Class) into each of the test containers.</p></li><li><p>Click one of the controls and notice that it takes one second for the server to return.</p></li><li><p>Position and resize the test containers so that both of them are visible at the same time.</p></li><li><p>Click one of the controls and then quickly click the other control. Notice that they finish waiting at approximately the same time. (If <b>CComAutoThreadModule</b> were not used, the first control would finish after one second, but the second control would not finish until a full second after the first control finished. The second call to sleep would not occur until the first had finished.) You can use the <b>Delay(PropGet)</b> and <b>Delay(PropPut)</b> methods to adjust the number of milliseconds the server sleeps for. If set properly, the second call to sleep may return before the first call to sleep.</p></li></ol></div><h1 class="heading">How the Sample Works</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><p>The server interface has a single method: <b>Sleep</b>. This method puts the server thread to sleep for a given amount of time. The client portion of the sample is an ActiveX control that invokes the server's sleep method when the user clicks the control. The client also has a property named <b>Delay</b> that represents how long the server thread will sleep. The control displays the text "Ready" when it is waiting for a user click. The text "Waiting" is displayed when the control is waiting for the server to finish sleeping.</p></div><h1 class="heading">Attributes</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>This sample uses the following attributes:  </p><ul><li><p><b>AutoThread/AutoClient</b>   coclass, dual, emitidl, helpstring, id, in, module, object, out, pointer_default, progid, propget, propput, registration_script, retval, threading, uuid, version, vi_progid</p></li><li><p><b>AutoThread/AutoServer</b>   coclass, dual, emitidl, helpstring, id, module, object, pointer_default, progid, threading, uuid, version, vi_progid</p></li></ul></div><h1 class="heading">Keywords</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample uses the following keywords:</p><p>AtlGetObjectSourceInterface; BEGIN_SINK_MAP; CoCreateInstance; DECLARE_CLASSFACTORY_SINGLETON; IDispEventSimpleImpl::DispEventAdvise; END_SINK_MAP; IConnectionPointContainerImpl; IConnectionPointImpl; IDispEventImpl; OLE2CT; SINK_ENTRY_EX; SysAllocString; USES_CONVERSION; VARIANT; VariantClear; VariantCopy</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some of the samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :AutoThread Attributes Sample: Demonstrates the Use of CAtlAutoThreadModule">comments</a> about this topic to Microsoft.
      </div></div></body></html>
