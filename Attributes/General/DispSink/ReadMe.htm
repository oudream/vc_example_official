<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>DispSink Attributes Sample: Handles Events Fired from a Singleton COM Server Through a Dispatch Interface</title></head><body><h1>DispSink Attributes Sample: Handles Events Fired from a Singleton COM Server Through a Dispatch Interface</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The DispSink attributes sample demonstrates a singleton server object (an object that can have only one instance) that has its own dual interface and a dispatch interface used for firing off events.</p><p>The <MSHelp:link keywords="6C3D27A6-80D3-4A80-833C-AA8B19487632" tabindex="0" >Attributes Tutorial</MSHelp:link> includes step-by-step procedures for creating the DispSink attributes sample.</p><p>The DispSink sample is the nonattributed version of this sample.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file DispSink.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>.</p></li><li><p>Open two or more instances of the ActiveX Control Test Container and insert the client control, DispCtl, into each instance. See <MSHelp:link keywords="626867CF-FE53-4C30-8973-55BB93EF3917" tabindex="0" >Testing Properties and Events with Test Container</MSHelp:link> for information on how to access the test container.</p></li><li><p>Invoke the <b>Connect </b>method on all of the controls.</p></li><li><p>Invoke the <b>Send</b> method on one of the controls. Change the <b>Parameter Type</b> field of the <b>Invoke Methods</b> dialog box to VT_BSTR and then type any string into the <b>Parameter Value</b> box. Click the <b>Invoke</b> button. The string will be displayed in the center of all connected controls.</p></li><li><p>Invoke the <b>Disconnect</b> method on all controls prior to deleting them.</p></li></ol></div></div><h1 class="heading">How the Sample Works</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>The server is a singleton object that has its own dual interface as well as a dispatch interface used for firing off events. The dispatch interface is placed in the .idl file using the <b>dispinterface</b> attribute. The server object receives data through its dual interface <b>Send</b> method and transmits it to all connected components through the <b>Transfer</b> event on its dispatch interface. The Dispserver uses the <b>event_source</b> attribute, and the Dispclient uses the <b>event_receiver</b> attribute.</p><p>The client is an ActiveX control that contains a server object. The control responds to the <b>Transfer</b> event fired by the server object. It has a dual interface that has <b>Connect</b>, <b>Send</b>, and <b>Disconnect</b> methods. If the <b>Transfer</b> event is fired with a variant containing a BSTR, the string is displayed in the center of the control.</p></div><h1 class="heading">Attributes</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample uses the following attributes:  </p><ul><li><p><b>DISPSINK/DispClient</b>   coclass, dual, event_receiver, helpstring, id, module, object, pointer_default, registration_script, threading, uuid, version, vi_progid</p></li><li><p><b>DISPSINK/DispServer</b>   coclass, default, dispinterface, dual, event_source, helpstring, id, module, object, pointer_default, threading, uuid, vi_progid</p></li></ul></div><h1 class="heading">Keywords</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>This sample uses the following keywords:</p><p>#import; CComAutoThreadModule; CComSimpleThreadAllocator; CoCreateInstance; DECLARE_CLASSFACTORY_AUTO_THREAD; FireViewChange</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some of the samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :DispSink Attributes Sample: Handles Events Fired from a Singleton COM Server Through a Dispatch Interface">comments</a> about this topic to Microsoft.
      </div></div></body></html>
