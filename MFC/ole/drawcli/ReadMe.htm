<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>DRAWCLI Sample: Illustrates Integrating Active Container Support with Application-Specific Features</title></head><body><h1>DRAWCLI Sample: Illustrates Integrating Active Container Support with Application-Specific Features</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The DRAWCLI sample is an object-oriented drawing application with Visual Editing container support. Among the MFC Active container samples — CONTAINER, OCLIENT, and DRAWCLI — this sample provides the best illustration of integrating Active container support with application-specific features (in this case, drawing features). In addition, DRAWCLI demonstrates effective use of C++ polymorphism in the design of its "shape" and "drawing tool" classes (<b>CDrawObj</b> and <b>CDrawTool</b>).</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the DRAWCLI sample</h4><div class="subSection"><ol><li><p>Open the solution drawcli.sln.</p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>.</p></li><li><p>From the project's <b>Debug</b> directory, open and run the DRAWCLI application.</p></li></ol></div></div><h1 class="heading">DRAWCLI's Windows Logo Features</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>DRAWCLI also illustrates Windows logo compliance. All MFC applications meet some of the requirements for the Windows logo: a Win32 executable, support for long file names, support for UNC path names, and use of system colors and metrics. DRAWCLI meets the remaining requirements for the Windows logo by including the following features.  </p><ul><li><p>ActiveX support. DRAWCLI is an Active container that stores its files in the compound file format, supports in-place activation, and acts as a drop target for drag-and-drop operations.</p></li><li><p>MAPI support. DRAWCLI provides a "Send as Mail" message on its File menu, allowing the user to send a document as a mail attachment.</p></li><li><p>Compliance with shell guidelines, including registration of large and small icons, use of the system registry instead of an .ini file, and having a setup and an uninstall program. For the latter, DRAWCLI includes a script compatible with InstallSHIELD, Stirling Software's toolkit for creating setup and uninstall programs.</p></li></ul><p>DRAWCLI also meets the following recommendations for Windows applications.  </p><ul><li><p>Uses tabbed property pages.</p></li><li><p>Uses Windows common controls.</p></li><li><p>Displays a shortcut menu in response to a right-button mouse click.</p></li><li><p>Stores Summary Information with its documents.</p></li></ul><p>DRAWCLI's user interface is similar to those of other object-oriented drawing programs.</p></div><h1 class="heading">Integrating Active Container Support with Application-Specific Features</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>The DRAWCLI sample was originally a stand-alone drawing application developed using the MFC classes. The stand-alone version of DRAWCLI was then integrated with a second skeleton version of DRAWCLI created using the application wizard's ActiveX Container feature. This process is similar to how the ActiveX Visual Editing server adds server support to SCRIBBLE. </p><p>The design of an MFC ActiveX container application should look essentially the same, regardless of whether you are adding ActiveX functionality to an existing stand-alone MFC (doc/view) application, or whether you're starting with an application wizard–generated ActiveX container application. The following is a brief description of how DRAWCLI is separated into application-specific code and ActiveX container-specific code.  </p><ul><li><p>Class <b>CDrawObj</b>, implemented in Drawobj.cpp, is a base class for derived "shape" classes. This base class handles hit testing of shapes, moving of shapes, and resizing of shapes. Using polymorphism, DRAWCLI can interact with objects of different classes through <b>CDrawObj's</b> interface. </p></li><li><p>Classes <b>CDrawRect</b> and <b>CDrawPoly</b> are derived from <b>CDrawObj</b>. <b>CDrawRect</b> is used to draw rectangles, rounded rectangles, ellipses, and lines. <b>CDrawPoly</b> is used to draw polygons. These two classes are independent of DRAWCLI's ActiveX container functionality.</p></li><li><p>Class <b>CDrawOleObj</b> is also derived from <b>CDrawObj</b>, and is used to represent embedded objects. <b>CDrawOleObj</b> delegates any ActiveX-specific operation to a contained <b>CDrawItem</b> object (described below). For generic shape operations, embedded objects are treated like other shape objects in DRAWCLI because <b>CDrawOleObj</b> is derived from <b>CDrawObj</b>.</p></li><li><p>Class <b>CDrawItem</b>, derived from <b>COleClientItem</b>, handles all the ActiveX-specific behavior for the embedded object. The implementation of <b>CDrawItem</b> is similar to the implementation of the <b>COleClientItem</b>-derived classes in the CONTAINER and OCLIENT samples.</p></li><li><p>Class <b>CDrawDoc</b> is derived from <b>COleDocument</b>. The <b>COleDocument</b> object maintains a <b>CObList</b> of <b>CDrawObj</b> objects. <b>CDrawDoc</b> delegates several ActiveX container-specific menu commands, such as <b>Edit Paste</b>, <b>Paste Link</b>, and <b>Links</b>, to the base class <b>COleDocument</b>. </p></li><li><p>Class <b>CDrawView</b> is derived from <b>CScrollView</b>. The ActiveX-specific implementation of <b>CDrawView</b> is similar to the implementation of the view classes in the CONTAIN and OCLIENT samples. The bulk of DRAWCLI's drawing-specific user interface is also implemented in <b>CDrawView</b>.</p></li></ul></div><h1 class="heading">Keywords</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following keywords:</p><p>AfxGetApp; AfxGetMainWnd; AfxMessageBox; AfxOleInit; AfxRegisterWndClass; AfxThrowMemoryException; CArchive::Close; CArchive::IsStoring; CBitmap::CreateCompatibleBitmap; CBrush::CreateBrushIndirect; CBrush::CreateSolidBrush; CCmdTarget::BeginWaitCursor; CCmdTarget::EndWaitCursor; CCmdUI::Enable; CCmdUI::SetCheck; CCmdUI::SetRadio; CColorDialog::DoModal; CColorDialog::GetColor; CControlBar::EnableDocking; CControlBar::GetBarStyle; CControlBar::SetBarStyle; CDC::Attach; CDC::BitBlt; CDC::CreateCompatibleDC; CDC::DPtoLP; CDC::DrawFocusRect; CDC::FillRect; CDC::GetClipBox; CDC::GetDeviceCaps; CDC::HIMETRICtoDP; CDC::IntersectClipRect; CDC::IsPrinting; CDC::LPtoDP; CDC::LineTo; CDC::MoveTo; CDC::OffsetViewportOrg; CDC::OffsetWindowOrg; CDC::PatBlt; CDC::SelectObject; CDC::SetBkColor; CDC::SetBrushOrg; CDC::SetMapMode; CDC::SetViewportExt; CDC::SetViewportOrg; CDC::SetWindowExt; CDC::SetWindowOrg; CDialog::DoModal; CDocTemplate::SetContainerInfo; CDocument::GetFirstViewPosition; CDocument::GetNextView; CDocument::GetTitle; CDocument::OnNewDocument; CDocument::OnOpenDocument; CDocument::OnSaveDocument; CDocument::SetModifiedFlag; CDocument::SetTitle; CDocument::UpdateAllViews; CFrameWnd::DockControlBar; CFrameWnd::EnableDocking; CFrameWnd::LoadFrame; CFrameWnd::OnCreateClient; CGdiObject::UnrealizeObject; CMDIChildWnd::Create; CMenu::GetSubMenu; CMenu::LoadMenu; CMenu::TrackPopupMenu; CObList::AddTail; CObList::GetCount; CObList::GetHeadPosition; CObList::GetNext; CObList::IsEmpty; CObList::RemoveAll; CObList::RemoveAt; CObject::AssertValid; CObject::Dump; CObject::IsKindOf; CObject::Serialize; COleClientItem::Close; COleClientItem::CreateCloneFrom; COleClientItem::CreateFromData; COleClientItem::CreateStaticFromData; COleClientItem::Deactivate; COleClientItem::Delete; COleClientItem::DoVerb; COleClientItem::Draw; COleClientItem::GetActiveView; COleClientItem::GetClipboardData; COleClientItem::GetDocument; COleClientItem::GetExtent; COleClientItem::GetInPlaceWindow; COleClientItem::GetItemState; COleClientItem::GetType; COleClientItem::IsInPlaceActive; COleClientItem::OnChange; COleClientItem::OnChangeItemPosition; COleClientItem::OnGetItemPosition; COleClientItem::Release; COleClientItem::SetItemRects; COleClientItem::UpdateLink; COleDataObject::AttachClipboard; COleDataObject::GetFileData; COleDataObject::IsDataAvailable; COleDataSource::CacheGlobalData; COleDataSource::SetClipboard; COleInsertDialog::CreateItem; COleInsertDialog::DoModal; COleInsertDialog::GetSelectionType; CPen::CreatePen; CPen::CreatePenIndirect; CPrintDialog::CreatePrinterDC; CRect::BottomRight; CRect::Height; CRect::InflateRect; CRect::IntersectRect; CRect::IsRectEmpty; CRect::NormalizeRect; CRect::OffsetRect; CRect::SetRect; CRect::TopLeft; CRect::Width; CRectTracker::Draw; CRgn::CreateEllipticRgnIndirect; CRgn::CreatePolygonRgn; CRgn::CreateRoundRectRgn; CRgn::RectInRegion; CScrollView::GetDeviceScrollPosition; CScrollView::SetScrollSizes; CStatusBar::Create; CStatusBar::SetIndicators; CString::MakeLower; CToolBar::Create; CView::DoPreparePrinting; CView::GetDocument; CView::IsSelected; CView::OnActivateView; CView::OnBeginPrinting; CView::OnDragEnter; CView::OnDragLeave; CView::OnDragOver; CView::OnDraw; CView::OnDrop; CView::OnEndPrinting; CView::OnInitialUpdate; CView::OnPrepareDC; CView::OnPreparePrinting; CView::OnPrint; CView::OnScrollBy; CView::OnUpdate; CWinApp::AddDocTemplate; CWinApp::EnableShellOpen; CWinApp::InitInstance; CWinApp::LoadStdProfileSettings; CWinApp::RegisterShellFileTypes; CWinApp::SetRegistryKey; CWnd::DoDataExchange; CWnd::GetCapture; CWnd::GetParentFrame; CWnd::Invalidate; CWnd::InvalidateRect; CWnd::OnCreate; CWnd::OnDestroy; CWnd::OnEraseBkgnd; CWnd::OnLButtonDblClk; CWnd::OnLButtonDown; CWnd::OnLButtonUp; CWnd::OnMouseMove; CWnd::OnSetFocus; CWnd::OnSize; CWnd::PreCreateWindow; CWnd::ScreenToClient; CWnd::SetCapture; CWnd::SetFocus; CWnd::ShowWindow; CWnd::UpdateWindow; DragAcceptFiles; Ellipse; GetACP; GetKeyState; GetMapMode; GetVersion; GlobalFree; GlobalLock; GlobalUnlock; LOWORD; LineTo; LoadCursor; MAKELONG; MoveTo; MulDiv; Polygon; RGB; Rectangle; RegisterClipboardFormat; ReleaseCapture; RoundRect; SelectObject; SetCursor; free; malloc; memcpy; min; realloc; wcstombs</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :DRAWCLI Sample: Illustrates Integrating Active Container Support with Application-Specific Features">comments</a> about this topic to Microsoft.
      </div></div></body></html>
