<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>DLGCBR32 Sample: Demonstrates Adding a Status Bar and Toolbar to Dialog Boxes</title></head><body><h1>DLGCBR32 Sample: Demonstrates Adding a Status Bar and Toolbar to Dialog Boxes</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The DLGCBR32 sample demonstrates how to add a status bar and a toolbar to a dialog box. In addition, it shows a number of techniques related to using a modeless dialog box as the main window of an MFC application.</p><p>In an MFC application, you can attach control bars such as status bars and toolbars to a frame window. However, for many applications a simple dialog box-based user interface is sufficient. MFC does not provide built-in support for adding control bars to dialog boxes.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the DLGCBR32 sample</h4><div class="subSection"><ol><li><p>Open the solution Dlgcbr32.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div></div><h1 class="heading">Adding a Control Bar to a Dialog Box</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>To add a control bar to a dialog box, create the control bar as usual, and then make room for the control bar within the client area of the dialog box. For the control bar to function properly, the dialog box must duplicate some of the functionality of a frame window. If you want <b>ON_UPDATE_COMMAND_UI</b> handlers to work for the control bars, you also need to derive new control bar classes and handle the <b>WM_IDLEUPDATECMDUI</b> message. If your dialog box is not the main window of your application, you will also need to modify its parent frame window to pass the <b>WM_IDLEUPDATECMDUI</b> message on to the dialog box's control bars.</p><p>To make room for a control bar within the client area of the dialog box, follow these steps in your dialog box's <b>OnInitDialog</b> function:  </p><ol><li><p>Create the control bars. Figure out how much room the control bars will take by using the <code>reposQuery</code> option of <code>RepositionBars</code>. </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>CRect rcClientStart;
CRect rcClientNow;
GetClientRect(rcClientStart);
RepositionBars(AFX_IDW_CONTROLBAR_FIRST,
               AFX_IDW_CONTROLBAR_LAST,
               0, reposQuery, rcClientNow);</pre></td></tr></table></span></div></li><li><p>Move the controls in your dialog box to account for the space used by control bars at the top or left of the client area. If your dialog box contains a menu, you also need to account for the space used by the menu. </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>CPoint ptOffset(rcClientNow.left - rcClientStart.left,
                rcClientNow.top - rcClientStart.top);
CRect rcChild;
CWnd* pwndChild = GetWindow(GW_CHILD);
while (pwndChild)
    {
       pwndChild-&gt;GetWindowRect(rcChild);
       ScreenToClient(rcChild);
       rcChild.OffsetRect(ptOffset);
       pwndChild-&gt;MoveWindow(rcChild, FALSE);
       pwndChild = pwndChild-&gt;GetNextWindow();
    }</pre></td></tr></table></span></div></li><li><p>Increase the dialog box window dimensions by the amount of space used by the control bars. </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>CRect rcWindow;
GetWindowRect(rcWindow);
rcWindow.right += rcClientStart.Width() - rcClientNow.Width();
rcWindow.bottom += rcClientStart.Height() - rcClientNow.Height();
MoveWindow(rcWindow, FALSE);</pre></td></tr></table></span></div></li><li><p>Position the control bars using <code>RepositionBars</code>.</p></li></ol><p>To update the first pane of a status bar with menu item text, you must handle <b>WM_MENUSELECT</b>, <b>WM_ENTERIDLE</b>, <b>WM_SETMESSAGESTRING</b>, and <b>WM_POPMESSAGESTRING</b> in your dialog box class. You need to duplicate the functionality of the <b>CFrameWnd</b> handlers for these messages. See the <b>CModelessMain</b> class in the sample program for examples of these message handlers.</p><p>To display tooltips for the toolbar buttons, it is necessary to handle the <b>TTN_NEEDTEXTW</b> and <b>TTN_NEEDTEXTA</b> notifications.</p><p>To allow <b>ON_UPDATE_COMMAND_UI</b> handlers to work for other status bar panes and for toolbar buttons, you must derive new control bar classes and implement a message handler for <b>WM_IDLEUPDATECMDUI</b>. This is necessary because the default control bar implementations of <b>OnUpdateCmdUI</b> assume the parent window is a frame window. However, <b>OnUpdateCmdUI</b> does not do anything but pass the parent-window pointer to a function that requires only a <b>CCmdTarget</b> pointer. Therefore, you can temporarily tell <b>OnUpdateCmdUI</b> that the parent-window pointer you are giving it is a <b>CFrameWnd</b> pointer to meet the compiler requirements. For example:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>LRESULT CDlgToolBar::OnIdleUpdateCmdUI(WPARAM wParam, LPARAM lParam)
{
   if (IsWindowVisible())
   {
      CFrameWnd* pParent = (CFrameWnd*)GetParent();
      if (pParent)
         OnUpdateCmdUI(pParent, (BOOL)wParam);
   }
   return OL;
}</pre></td></tr></table></span></div><p>To pass <b>WM_IDLEUPDATECMDUI</b> messages on to dialog boxes other than the main window, save dialog pointers in your frame window class and create a <b>WM_IDLEUPDATECMDUI</b> handler in that class. The handler should send the <b>WM_IDLEUPDATECMDUI</b> message on to the dialog child windows by using <b>CWnd::SendMessageToDescendants</b>. Then perform default processing for the message within the frame window.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :DLGCBR32 Sample: Demonstrates Adding a Status Bar and Toolbar to Dialog Boxes">comments</a> about this topic to Microsoft.
      </div></div></body></html>
