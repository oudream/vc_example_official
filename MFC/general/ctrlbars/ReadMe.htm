<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>CTRLBARS Sample: Illustrates Custom Control Bars</title></head><body><h1>CTRLBARS Sample: Illustrates Custom Control Bars</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The CTRLBARS sample illustrates a wide variety of customization options for control bars:  </p><ul><li><p>Multiple control bars in a frame window, selective hiding and showing of control bars, and dynamic rearrangement of controls along the border of the frame window. The control bars are allocated space in the frame window according to their Z-order, which initially is the order in which they are created (see <b>CMainFrame::OnCreate</b>). CTRLBARS changes the Z-order of the dialog bar with the <b>CWnd::SetWindowPos</b> function. It hides or shows a control bar using <b>CWnd::ShowWindow</b>. Whenever CTRLBARS changes the Z-order or hides or shows a control bar, it calls <b>CFrameWnd::RecalcLayout</b> afterward so that the window real estate is reallocated to the remaining visible control bars.</p></li><li><p>Custom toolbars, dynamic rearrangement of buttons on the toolbar, and adding controls (such as a combo box) to a toolbar. CTRLBARS demonstrates two ways of customizing a toolbar. The first toolbar, the Tool Bar, changes the arrangement of buttons between short (5 buttons) and long (10 buttons). CTRLBARS calls <b>CToolBar::SetButtonInfo</b> for each button to map it to a tile position on the toolbar's bitmap and to a command identification. The second toolbar, the Style Bar, illustrates replacing a toolbar button (or separator) with a control — a combo box in this example. <b>CMainFrame::CreateStyleBar</b> creates a 100-pixel-wide toolbar separator. It then creates the combo box (<b>IDW_COMBO</b>) as a child of the toolbar, and sets the position of the combo box to take the space it just allocated for the separator.</p></li><li><p>Custom status bar, custom indicators, and sending text to the message line. For status bars, the framework automatically updates a CAP LOCK, NUM LOCK, or SCROLL LOCK indicator if you specify, for example, <b>ID_INDICATOR_CAPS</b> as one of the identifications passed in the <i>indicators</i>[ ] array to <b>CStatusBar::SetIndicators</b>. CTRLBARS illustrates extending the standard status bar indicators with the overstrike (OVR) state, which the user toggles with the INSERT key. This requires a message handler for the <b>ID_TOGGLE_INSERT</b> command (mapped to the <b>VK_INSERT</b> key), and a resource string (<b>ID_INDICATOR_OVR</b>) for the text "OVR" to be displayed when the Overstrike mode is on. The resource identification <b>ID_INDICATOR_OVR</b> is a predefined MFC constant.</p></li><li><p>Dialog bar, which is a control bar whose layout is defined by a dialog resource template. As with any control bar, notifications from controls in the dialog bar are routed to the owner of the dialog bar, namely the main frame window. For example, <b>CMainFrame::OnSelChangePalette</b> is the handler for the <b>CBN_SELCHANGE</b> notification from the combo box control in a dialog bar. <b>CMainFrame</b> also has handlers for two of the three Hide/Show check boxes (<b>Styles</b> and <b>Palette</b>). No handler needs to be written for the third check box, <b>Hide/Show Toolbar</b>, since the framework provides the standard handler for <b>ID_VIEW_TOOLBAR</b>.</p></li><li><p>Floating tool palette, which behaves like a toolbar but displays a two-dimensional array of tool buttons and floats as a modeless window above the owner frame window. The floating tool palette is implemented in a reusable class, <b>CPaletteBar</b>, derived from <b>CToolBar</b>. The derivation from <b>CToolBar</b> provides <b>CPaletteBar</b> with toolbar button behavior. The palette-specific behavior implemented in <b>CPaletteBar</b> includes: </p><ul><li><p>Floating (<b>WS_POPUP</b>) window style.</p></li><li><p>Two-dimensional arrangement of the tool buttons into rows and columns: creation, painting, and button hit-testing.</p></li><li><p>Thin (no text) title bar.</p></li><li><p>Movable palette using a tracking rectangle.</p></li></ul></li><li><p>CTRLBARS also illustrates using <b>ON_COMMAND_EX</b> and <b>ON_UPDATE_COMMAND_UI_RANGE</b>. Many of the control bar customization options illustrated by CTRLBARS are discussed in <MSHelp:link keywords="8CB895C0-40EA-40EF-90EE-1DD29F34CFD1" tabindex="0" >Technical Note 31</MSHelp:link>.</p></li></ul><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the CTRLBARS sample</h4><div class="subSection"><ol><li><p>Open the solution Ctrlbars.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div><p>When you first run CTRLBARS, all the various controls are visible.  </p><ul><li><p>A toolbar with 5 buttons lies immediately below the menu bar. The first button (thick up-arrow) toggles the toolbar arrangement between "Short" (5 buttons) and "Long" (10 buttons). The buttons are always inactive except this first <b>Short/Long</b> button and the <b>Help</b> button, which opens the <b>About</b> box.</p></li><li><p>A second toolbar lies immediately below the first toolbar. This toolbar, called the Style Bar, is where you specify one of the following text alignment styles — Left, Centered, Right, or Justified. Selecting one of the styles has no effect other than to change the state of the Style Bar.</p></li><li><p>A status bar lies at the bottom of the window. </p></li><li><p>A floating palette, with a 3-by-4 array of tool buttons, lies on top of the window.</p></li><li><p>A dialog bar lies on the left border of the window. It is a dialog bar because the layout of this control bar is defined in a dialog template resource (<b>IDD_VIEW_SELECT</b>).</p></li></ul><p>The <b>View</b> menu lets you hide or show any of the first four of the controls bars. The dialog bar is always visible. The hide/show state of the <b>Tools</b>, <b>Styles</b>, and <b>Palette</b> control bars is immediately reflected in the <b>Hide/Show</b> check boxes in the dialog bar. You can also hide or show one of the other control bars by toggling its check box.</p><p>With the <b>Dlg Bar Top</b> command on the <b>View</b> menu, you can rearrange the control bars so that the dialog bar is at the top of the Z-order of the control bars. When the dialog bar is at the top, it extends along the entire left border of the window except for the menu and title bars. The left ends of the two toolbars touch the dialog bar. When the dialog bar is returned to its original Z-order position (after all of the other control bars), the top of the dialog bar touches the lower edge of the second toolbar bar, and the bottom of the dialog bar touches the upper edge of the status bar. This reflects the basic algorithm that control bars are allocated window real estate on a first-come, first-serve basis.</p><p>The <b>Style</b> menu lets you select one of the four text alignment styles — Left, Centered, Right, or Justified. Any selection you make is immediately reflected in the Style Bar's combo box and in the corresponding button. Similarly, you can make a selection either by choosing one of the styles in the Style Bar combo box or by pressing one of the four buttons. The new selection is immediately reflected in the states of the other controls and in the <b>Style</b> menu.</p><p>The <b>Palette</b> menu lets you change the tool arrangement of the palette from 3-by-4 to 2-by-6.</p><p>When you select a tool from the <b>Palette</b>, the status bar message line shows "You have selected the <i>&lt;type&gt;</i> tool," in which <i>&lt;type&gt;</i> indicates which of the 12 tools you selected. This selection is reflected in the combo box in the dialog bar. You can also select a tool using this combo box.</p><p>The status bar, in addition to showing the most recently selected tool, also shows the status of three keys — INS, CAPS LOCK, and NUM LOCK.</p></div><h1 class="heading">Keywords</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following keywords:</p><p>AfxFormatString1; AfxGetApp; AfxIsValidAddress; AfxRegisterWndClass; AfxThrowResourceException; BitBlt; CBrush::CreateSolidBrush; CCmdUI::ContinueRouting; CCmdUI::Enable; CCmdUI::SetCheck; CCmdUI::SetText; CComboBox::AddString; CComboBox::Create; CComboBox::GetCurSel; CComboBox::GetLBText; CComboBox::SetCurSel; CControlBar::GetBarStyle; CControlBar::SetBarStyle; CDC::Attach; CDC::Detach; CDC::PatBlt; CDC::RectVisible; CDialogBar::Create; CDumpContext::GetDepth; CFont::CreateFontIndirect; CFrameWnd::LoadFrame; CFrameWnd::RecalcLayout; CFrameWnd::SetMessageText; CGdiObject::Attach; CObject::AssertValid; CObject::Dump; CRect::Height; CRect::InflateRect; CRect::SetRectEmpty; CRect::Width; CStatusBar::Create; CStatusBar::GetPaneInfo; CStatusBar::SetIndicators; CStatusBar::SetPaneInfo; CString::LoadString; CToolBar::CToolBar; CToolBar::CommandToIndex; CToolBar::Create; CToolBar::GetButtonInfo; CToolBar::GetItemID; CToolBar::GetItemRect; CToolBar::LoadBitmap; CToolBar::SetButtonInfo; CToolBar::SetButtons; CToolBar::SetHeight; CToolBar::SetSizes; CWinApp::InitInstance; CWinApp::OnIdle; CWnd::ClientToScreen; CWnd::CreateEx; CWnd::GetCapture; CWnd::GetClientRect; CWnd::GetDC; CWnd::GetDlgItem; CWnd::GetOwner; CWnd::GetParentFrame; CWnd::GetSafeHwnd; CWnd::GetStyle; CWnd::GetWindowRect; CWnd::Invalidate; CWnd::InvalidateRect; CWnd::OnCancelMode; CWnd::OnCreate; CWnd::OnLButtonDown; CWnd::OnMouseActivate; CWnd::OnMouseMove; CWnd::OnSysColorChange; CWnd::PreCreateWindow; CWnd::ReleaseDC; CWnd::SendMessage; CWnd::SetCapture; CWnd::SetFont; CWnd::SetWindowPos; CWnd::ShowWindow; CWnd::UpdateDialogControls; CWnd::UpdateWindow; CreateBitmap; CreateCompatibleBitmap; CreateCompatibleDC; CreateDIBitmap; CreatePatternBrush; CreatePen; CreateSolidBrush; DeleteDC; DeleteObject; FillRect; FindResource; FrameRect; FreeResource; GetActiveWindow; GetBValue; GetCapture; GetDC; GetDeviceCaps; GetGValue; GetNextWindow; GetObjectType; GetParent; GetRValue; GetStockObject; GetSysColor; GetSystemMetrics; GetVersion; GetWindow; HIBYTE; InvertRect; LOBYTE; LoadCursor; LoadIcon; LoadResource; LockResource; MAKEINTRESOURCE; OffsetRect; PatBlt; RGB; ReleaseCapture; ReleaseDC; SelectObject; SendMessage; SetActiveWindow; SetBkColor; SetCapture; SetROP2; SetRect; SetTextColor; StretchDIBits; UpdateWindow; free; lstrcpy; malloc; memcpy; memset</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :CTRLBARS Sample: Illustrates Custom Control Bars">comments</a> about this topic to Microsoft.
      </div></div></body></html>
