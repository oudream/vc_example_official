<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>DYNAMENU Sample: Dynamically Updates Menus</title></head><body><h1>DYNAMENU Sample: Dynamically Updates Menus</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The DYNAMENU sample illustrates dynamic modification of menus and status bars regardless of whether handling commands are known at compile time. DYNAMENU illustrates the following capabilities:  </p><ul><li><p>Dynamically updating the list of items in a menu.</p></li><li><p>Implementing the equivalent of <b>ON_COMMAND</b> and <b>ON_UPDATE_COMMAND_UI</b> handlers for menu commands whose IDs are not known at compile time. This illustration can be applied to more complex cases, such as user-configurable menus.</p></li><li><p>Updating the status bar command prompt for commands whose IDs are not known at compile time.</p></li></ul><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the DYNAMENU sample</h4><div class="subSection"><ol><li><p>Open the solution dynamenu.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div><p>DYNAMENU initially displays a window with the text: "This text is displayed in the current color." You can change the color of the displayed text by selecting one of four items initially offered in the <b>Color</b> menu: Black, Red, Purple, or Blue. </p><p>To exercise the dynamic menu updating feature of DYNAMENU, click <b>Change Options</b> on the <b>Color</b> menu, which opens a <b>Change Color Options</b> dialog box. Check boxes for Black, Red, Purple, and Blue allow you to choose which colors are dynamically offered in the <b>Color</b> menu. For example, if you clear Red and Purple and return to the <b>Color</b> menu, only Black and Blue items will be offered in the menu.</p><p>Note how the status bar displays, for example, "Set current color text to Black," when the focus is on the Black item in the <b>Color</b> menu.</p></div><h1 class="heading">Dynamically Updating the List of Items in a Menu</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>Class <b>CDynaMDIChildWnd</b> in Mdichild.cpp implements dynamic updating of items in the <b>Color</b> menu. When the list of available colors is updated, or when then MDI child window is activated, the <b>CDynaMDIChildWnd::RefreshColorMenu</b> function calls <b>CMenu::DeleteMenu</b> to delete each color item from the menu, and then adds the currently available colors to the menu using <b>CMenu::AppendMenu</b>.</p></div><h1 class="heading">Implementing Command Handlers for Dynamic Menu Items</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>DYNAMENU could have been implemented by reserving a fixed list of command IDs for the colors: <b>ID_COLOR_BLACK</b>, <b>ID_COLOR_RED</b>, and so on. In such a case, <b>ON_COMMAND</b> and <b>ON_UPDATE_COMMAND_UI</b> handlers could have been implemented for the color commands as usual. This would be the most straightforward way to implement DYNAMENU.</p><p>However, for sake of illustration, DYNAMENU does not use fixed command IDs. Instead, DYNAMENU dynamically assigns command IDs not known or associated with the menu items at compile time. This illustration can be applied to more complex cases, such as user-configurable menus. </p><p>The equivalent of <b>ON_COMMAND</b> and <b>ON_UPDATE_COMMAND</b> message map handling is implemented in the document's override of <b>CCmdTarget::OnCmdMsg</b>. If the <b>OnCmdMsg</b> function is called with a NULL pointer for the <b>AFX_CMDHANDLERINFO*</b> parameter, this means that no message map entry has been found for the command. In this case, the override of <b>OnCmdMsg</b> checks whether the command ID, passed as the first parameter, is one of the dynamically assigned command IDs for the color menu items. If so, the override calls either a command handler (<b>DoSelectColor</b>) or command user interface handler (<b>DoUpdateSelectColor</b>), depending on whether the second parameter passed to <b>OnCmdMsg</b> is the MFC-defined <b>CN_COMMAND</b> or <b>CN_UPDATE_COMMAND_UI</b>. </p></div><h1 class="heading">Updating Status Bar Command Prompt for Dynamic Menu Items</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>In DYNAMENU, the MDI child window (<b>CDynaMDIChildWnd</b>) owns the status bar. The default implementation of <b>CFrameWnd::GetMessageString</b> uses the currently shown command ID (for the item that currently has the focus in the menu) to get the corresponding string resource for the command and display it in the first pane of the status bar. DYNAMENU overrides <b>GetMessageString</b> to display a command prompt for the dynamically defined commands.</p></div><h1 class="heading">Keywords</h1><div id="sectionSection4" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following keywords:</p><p>AfxFormatString1; AfxGetMainWnd; CCmdTarget::OnCmdMsg; CDialog::DoModal; CDialog::OnInitDialog; CDocument::GetFirstViewPosition; CDocument::GetNextView; CDocument::OnNewDocument; CDocument::UpdateAllViews; CFrameWnd::Create; CFrameWnd::GetActiveDocument; CFrameWnd::GetMessageString; CFrameWnd::LoadFrame; CMenu::AppendMenu; CMenu::DeleteMenu; CMenu::GetMenuItemCount; CMenu::GetMenuItemID; CMenu::GetSubMenu; CObject::AssertValid; CObject::Dump; CObject::Serialize; CString::LoadString; CView::DoPreparePrinting; CView::GetDocument; CView::OnBeginPrinting; CView::OnDraw; CView::OnEndPrinting; CView::OnPreparePrinting; CWinApp::AddDocTemplate; CWinApp::EnableShellOpen; CWinApp::InitInstance; CWinApp::LoadStdProfileSettings; CWinApp::RegisterShellFileTypes; CWnd::CenterWindow; CWnd::DoDataExchange; CWnd::GetClientRect; CWnd::GetDlgItem; CWnd::GetMenu; CWnd::GetParentFrame; CWnd::OnCreate; CWnd::SetWindowText; CWnd::ShowWindow; CWnd::UpdateWindow; DragAcceptFiles; DrawText; LoadBitmap; RGB; SetBkMode; SetTextColor</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :DYNAMENU Sample: Dynamically Updates Menus">comments</a> about this topic to Microsoft.
      </div></div></body></html>
