<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>CTRLTEST Sample: Implements Custom Controls</title></head><body><h1>CTRLTEST Sample: Implements Custom Controls</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The CTRLTEST sample illustrates several techniques for implementing and using custom controls:  </p><ul><li><p>Implementing <b>CParsedEdit</b>, a specialized edit control deriving functionality from its library control class, and three methods of using custom controls.</p></li><li><p>Using the spin control. The spin control has small up-arrow and down-arrow buttons for incrementing or decrementing a value.</p></li><li><p>Bitmap button implementation of <b>Custom</b> menu commands using <b>CBitmapButton</b>.</p></li><li><p>Owner (parent window) drawing of menus and list boxes. Corresponding control classes deriving from the <b>CMenu</b> class and <b>CListBox</b> provide this feature in an object-oriented way.</p></li><li><p>Using resource files not maintainable by the Microsoft Visual C++ resource editors. This illustrates the benefits and drawbacks of using an .rc2 file in a dialog box that has a custom control with styles defined by constants in a header file.</p></li></ul><p>All the illustrations in CTRLTEST are initiated through menu commands.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the CTRLTEST sample</h4><div class="subSection"><ol><li><p>Open the solution Ctrltest.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div></div><h1 class="heading">Example: Implementing and Using Custom Controls</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>You can implement a custom control by deriving from <b>CWnd</b>, but it is much easier if you can borrow functionality from a standard Windows controls by deriving from its control class in the library. CTRLTEST does this to implement a specialized edit control, <b>CParsedEdit</b>. This edit control accepts only specified sets of characters as user input: numeric, alphabetic, or noncontrol characters. <b>CParsedEdit</b> is derived from <b>CEdit</b>. It has an <b>OnChar</b> message handler to filter the characters.</p><p>The implementation of the commands in the <b>Simple</b> menu illustrates three methods of using a custom control. The methods are distinguished according to how the application associates instances of the control in the dialog box with the <b>CParsedEdit</b> class. Each <b>Simple</b> menu command displays a dialog box with four instances of the <b>CParsedEdit</b> control. Data entered in the dialog box is sent to the debug port as <b>TRACE</b> output. The three <b>Simple</b> menu commands are:</p><sections ><h4 class="subHeading" xmlns="">Test C++ Derived Class</h4><div class="subSection" xmlns=""><p>The <b>CParsedEdit</b> controls are data members of the dialog class. The controls are explicitly created in the dialog's <code>OnInitDialog</code> function by calling <b>CParsedEdit::CreateSet</b>. See Dertest.cpp.</p></div><h4 class="subHeading" xmlns="">Test WNDCLASS Registered</h4><div class="subSection" xmlns=""><p>The <b>CParsedEdit</b> controls are laid out in a dialog template resource (IDD_WNDCLASS_EDIT) as custom controls with a WNDCLASS identified as "paredit." It is instructive to examine the properties of these custom controls using the Visual C++ dialog editor.  </p><ul><li><p>Caption blank. This is the initial value shown in the <b>CParsedEdit</b> control.</p></li><li><p>Class:paredit. This is the WNDCLASS name that is registered by <b>CParsedEdit::RegisterControlClass</b> in PAREDIT2.CPP, before the dialog is called.</p></li><li><p>Visible:checked. The control is visible.</p></li><li><p>Tabstop:checked. The user can tab to this control.</p></li><li><p>Style:0x5081002, 0x5081001, 0x5081003, 0x5081ffff for the four parsed edit controls. The style 0x500000 is for WS_CHILD and WS_VISIBLE, and 0x1000 is for WS_TABSTOP. All custom controls have the WS_CHILD style. The WS_VISIBLE and WS_TABSTOP styles are automatically set by the dialog editor when you check the Visible and Tabstop styles. 0x80000 is for WS_BORDER. Since the dialog editor property page for a custom control does offer all of the window styles such as WS_BORDER, you must look up the constant in \Microsoft Visual Studio .NET 2003\Vc7\PlatformSDK\Include\WINUSER.H. The styles 0x0001, 0x0002, 0x0004, and 0x0ffff are defined in PAREDIT.H as, respectively, PES_NUMBERS, PES_LETTERS, PER_OTHERCHARS, and PES_ALL. </p></li><li><p>The hexadecimal styles in the custom control property page are not self-documenting. If it is important to you to use the symbolic styles, such as PES_NUMBERS and PES_LETTERS, you can alternatively manually edit a separate resource file, such as RES\Ctrltest.rc2, that is included by the resource compiler at compile time, but is not read by Visual C++ at editing time. For a discussion of the pros and cons of manually editing a custom control dialog in an .rc2 file, see ">Using resource files not maintainable by the Visual C++ resource editors.</p></li></ul></div><h4 class="subHeading" xmlns="">Test Dynamic Subclassed</h4><div class="subSection" xmlns=""><p>The controls are laid out in a dialog template resource (IDD_SUB_EDIT in Ctrltest.rc) as standard edit controls. The controls are declared as <b>CParsedEdit</b> data members in the dialog class. The dialog's <b>OnInitDialog</b> function calls <b>CParsedEdit::SubClassEdit</b>, which in turn calls <b>CWnd::SubclassDlgItem</b>, to associate each specific instance of the edit control with the <b>CParsedEdit</b> class. See Paredit.cpp.</p></div></sections></div><h1 class="heading">Example: Spin Control</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>The CTRLTEST sample includes an implementation of a spin control. The spin control has a small up-arrow and a small down-arrow button for incrementing or decrementing a value. </p><p>The <b>Spin Control</b> command calls a dialog box that has four <b>CParsedEdit</b> controls, each associated with a spin control. Data entered in the <b>CParsedEdit</b> controls in this dialog box is filtered to accept only nonnegative integers. The user can enter numeric data by either typing the value into the <b>CParsedEdit</b> control or using the associated spin control.</p></div><h1 class="heading">Example: Bitmap Button</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>The implementation of the following <b>Custom</b> menu commands illustrates ways to use <b>CBitmapButton</b>:  </p><ul><li><p><b>Bitmap Button 1</b> - The dialog constructor explicitly loads the bitmap resources for each of the three states (up, down, and focus) of the button by calling <b>CBitmapButton::LoadBitmaps</b>.</p></li><li><p><b>Bitmap Button 2</b> - The dialog's <b>OnInitDialog</b> function calls <b>CBitmapButton::Autoload</b> to load the bitmap resources based on the following naming convention. The window text of the control serves as the base resource name, and the letters U, D, and F are appended to create the names of the resources for each of the three bitmap images for, respectively, up, down, and focus. For example, the three bitmap resources for the <b>OK</b> button are named OKU, OKD, and OKF.</p></li><li><p><b>Bitmap Button 3</b> - The dialog box is an extension of the second dialog box above, using a fourth possible button state, disabled. To use this dialog, click the left- or right-arrow bitmap button until the displayed number reaches 1, the lowest number, or 10, the highest number. When the limit is reached, the button is disabled and a fourth bitmap image is displayed. The naming convention for the bitmap resource for the disabled state is an X suffix, as is reflected in the resource names PREVX and NEXTX.</p></li></ul></div><h1 class="heading">Example: Owner Drawing (Menu and List Box)</h1><div id="sectionSection4" class="seeAlsoNoToggleSection"><p>Various Windows controls and menus have an owner draw feature that lets the parent (or owner) window draw whatever it wants in the client area of the control instead of the standard control behavior. The corresponding control classes and <b>CMenu</b> class provide this feature in a more convenient, object-oriented way: The control or menu class handles the drawing. This is called "self drawing."</p><p>CTRLTEST illustrates the general technique of owner drawing in implementing the following commands in the <b>Custom</b> menu:  </p><ul><li><p><b>Custom Menu</b> -This menu item calls a <b>CColorMenu</b> pop-up menu, derived from <b>CMenu</b>. Each submenu item displays one of eight colors using the self-drawing feature. A message box confirms the color you select from the submenu.</p></li><li><p><b>Custom List Box</b> - This menu item calls a dialog box that displays a <b>CColorListBox</b>, derived from <b>CListBox</b>. The list box has eight entries, each drawn in one of eight colors using the self-drawing feature. <b>TRACE</b> output confirms your selection from the list box.</p></li></ul><sections ><a name="_sample_mfc_ctrltest_using_non_vcre_files" xmlns=""></a><h4 class="subHeading" xmlns="">Example: Using Resource Files Not Maintainable by Visual C++ Resource Editors</h4><div class="subSection" xmlns=""><p>The resource file CTRLTEST\RES\Ctrltest.rc2 is an example of a resource file not maintainable by the Visual C++ resource editors in a human-readable form. If you were to open Ctrltest.rc2 in Visual C++ and then save it, you would lose useful human-readable information, even though the resource compiler would still be able to compile the .rc2 file and produce an equivalent binary .res file. Thus, RES\Ctrltest.rc2 has been added as a <code>#include</code> in Ctrltest.rc with a compile-time directive specified with the <b>Resource File Set Includes</b> command.</p><p>The following are three categories of human-readable information that are not maintainable by the Visual C++ resource editors. Two of these are demonstrated in Ctrltest.rc2:  </p><ul><li><p><b>Custom control styles symbols</b> - For example, "msctls_updown32" is a style defined for the spin control. Although Visual C++ can interpret this symbol as it reads in the .rc2 file, Visual C++ would write it back out to the .rc2 file as a hexadecimal value.</p></li><li><p><b>Standard Windows WS_ or control style symbols used in a control from a standard Windows control-derived class</b> - For example, <b>ES_AUTOHSCROLL</b> is defined for the spin control in the IDD_SPIN_EDIT dialog. Although Visual C++ can interpret these symbols as it reads in the .rc2 file, Visual C++ would write it back out to the .rc2 files as a hexadecimal value.</p></li><li><p><b>Arithmetic in the .rc file</b> - Expressions such as "IDC_EDIT1+2" to identify controls in the IDD_SPIN_EDIT dialog would be written back out to the .rc2 file as a single hexadecimal value by Visual C++.</p></li></ul><p>The CTRLTEST sample illustrates the pros and cons of using an .rc2 file in the case of a dialog that has a custom control with styles defined with constants in a header file. Both dialogs <b>IDD_WNDCLASS_EDIT</b> and <b>IDD_SPIN_EDIT</b> have custom controls with symbolically defined styles; but <b>IDD_WNDCLASS</b> is specified in a .rc file editable by the Visual C++ dialog editor, whereas <b>IDD_SPIN_EDIT</b> is specified in a .rc2 file that is only manually editable. </p><p>The differences between using the .rc file and the .rc2 file can be summarized as follows.</p><p>For the <b>IDD_WNDCLASS_EDIT</b> dialog, the resource script is defined in Ctrltest.rc. For the <b>IDD_SPIN_EDIT</b> dialog, the resource script is defined in RES\Ctrltest.rc2. For the <b>IDD_WNDCLASS_EDIT</b> dialog, the WNDCLASS custom control is "paredit", the style constants are defined in PAREDIT.H and an example style constant is PES_NUMBER. <b>IDD_WNDCLASS_EDIT</b> is editable by Visual C++ but cannot use <code>#define</code> styles. <b>IDD_SPIN_EDIT</b> is not editable by Visual C++ but can use <code>#define</code> styles.</p><p>The tradeoff is that if you use the .rc2 file, you can use human-readable symbolic styles defined in the header file for the custom control, but you cannot edit the .rc2 file with the Visual C++ dialog editor. It is easier to lay out the dialog using Visual C++ than it is to manually write resource script; and writing resource script is more error prone. On the other hand, the styles are not self documenting when displayed in hexadecimal in the custom control property page by the Visual C++ dialog editor.</p></div><h4 class="subHeading" xmlns="">Keywords</h4><div class="subSection" xmlns=""><p>This sample demonstrates the following keywords:</p><p>AfxGetInstanceHandle; AfxMessageBox; AfxThrowResourceException; CBitmapButton::AutoLoad; CDC::FillRect; CDC::FrameRect; CDialog::DoModal; CDialog::EndDialog; CDialog::OnInitDialog; CDialog::OnOK; CDialog::OnSetFont; CEdit::Create; CEdit::SetSel; CFrameWnd::Create; CListBox::AddString; CListBox::CompareItem; CListBox::DrawItem; CListBox::GetItemData; CListBox::MeasureItem; CMenu::AppendMenu; CMenu::CreateMenu; CMenu::Detach; CMenu::DrawItem; CMenu::EnableMenuItem; CMenu::FromHandle; CMenu::GetMenuString; CMenu::MeasureItem; CRect::Width; CStatic::Create; CString::Format; CString::LoadString; CWinApp::InitInstance; CWnd::Attach; CWnd::EnableWindow; CWnd::FromHandle; CWnd::GetDlgCtrlID; CWnd::GetDlgItem; CWnd::GetDlgItemInt; CWnd::GetMenu; CWnd::GetParent; CWnd::GetWindowRect; CWnd::GetWindowText; CWnd::IsWindowEnabled; CWnd::MessageBox; CWnd::OnChar; CWnd::OnCommand; CWnd::OnVScroll; CWnd::PostNcDestroy; CWnd::SendMessage; CWnd::SetDlgItemInt; CWnd::SetFocus; CWnd::SetFont; CWnd::SetWindowPos; CWnd::ShowWindow; CWnd::SubclassDlgItem; CallWindowProc; GetBValue; GetClassInfo; GetGValue; GetRValue; GetSystemMetrics; HIWORD; IsCharAlpha; IsCharAlphaNumeric; LOWORD; MAKEINTRESOURCE; MAKELONG; MessageBeep; ModifyMenu; RGB; RegisterClass; SetWindowLong</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></sections></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :CTRLTEST Sample: Implements Custom Controls">comments</a> about this topic to Microsoft.
      </div></div></body></html>
