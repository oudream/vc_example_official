<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>MMXSwarm Sample: Demonstrates CImage and Visual C++ MMX Support</title></head><body><h1>MMXSwarm Sample: Demonstrates CImage and Visual C++ MMX Support</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>MMXSwarm is an MFC sample that demonstrates how to use the MFC <MSHelp:link keywords="52861E3D-BF7E-481F-A240-90E88F76C490" tabindex="0" >CImage</MSHelp:link> class, the <MSHelp:link keywords="DF0410E8-67C9-4954-88C8-FE2653575252" tabindex="0" >__m64</MSHelp:link> and <MSHelp:link keywords="BD245D68-862C-46DD-9903-6C67C7C5DBCD" tabindex="0" >__m128i</MSHelp:link> data types, and device-independent bitmaps (DIB).</p><p>The sample demonstrates the implementation of <b>CImage</b> support into an application for basic loading and saving of data in many image formats. In addition, the sample demonstrates direct manipulation of a DIB surface, as well as using higher-level compiler support for MMX and SSE2 integer instructions to optimize bitmap manipulation without writing assembler code.</p><p>In the project, the Surface.* files contain the C++ base class for the DIB surface manipulation:  </p><ul><li><p>The MMXSurface*.* files contain derived classes with MMX optimizations. MMXWrapper.h contains a simple class that encapsulates the compiler's <b>__m64</b> data type and operations into a C++ friendly class for 16-bit saturated MMX operations.</p></li><li><p>The SSE2Surface*.* files contain derived classes with SSE2 optimizations. SSE2Wrapper.h contains a simple class that encapsulates the compiler's <b>__m128i</b> data type and operations into a C++ friendly class for 16-bit saturated SSE2 integer operations.   </p></li></ul><p>These wrapper classes are not generally useful "as is", containing only enough functionality for the sample. The sample does not use the document/view archictecture. The <code>CChildView</code> class is derived from <MSHelp:link keywords="49A832EE-BC34-4126-88B3-BC1D9974F6C4" tabindex="0" >CWnd</MSHelp:link> and bound to the frame window.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the MMXSwarm sample</h4><div class="subSection"><ol><li><p>Open the solution MMXSwarm.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div><p>In both Debug and Release mode, assembly listings of the MMXSurface*.cpp and SSE2Surface*.cpp files are generated in the output directory. Examine these files to see the code generated by the MMX and SSE2 portions of the project.</p><p>Build the sample in Release mode to see the speed improvements gained from using the intrinsic MMX and SSE2 integer support. In addition, debug information is generated for the release build to ease stepping through the MMX and SSE2 generated code.</p><p>For best results, run the sample in 32-bit color mode.</p><p>The sample draws a simple swarm on the screen and uses a custom fade routine to blur the image over time. The <b>File</b> menu has the options for saving the current image or loading an existing image. The <b>View</b> menu has options to disable/enable the blurring and the swarm. The <b>View</b> menu also contains a 'Pause Blit' command that will disable the BitBlt to the screen that enables better frame rate distinctions in the blur implementations. In addition, several keystrokes are asynchronously checked for other DIB manipulation (SHIFT, SPACE, UP ARROW, and DELETE). Finally, the <b>CImage</b> menu lets you select the bit depth of the DIB being manipulated. Typically, it is best if it matches the desktop bit depth. Each bit depth has an option for blurring with a generic C++ routine, or one optimized with the MMX or SSE2 integer intrinsics. The status bar contains a frame-per-second measurement to illustrate the performance differences. </p></div><h1 class="heading">Keywords</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following keywords:</p><p>CImage::GetExporterFilterString, CImage::Load, CImage::SaveAdvanced, CImage::Create, CImage::GetPitch, CImage::GetDC, CImage::ReleaseDC, CImage::Destroy, CImage::BitBlt, CImage::GetBits, CImage::GetHeight, CImage::GetPixelAddress, GetAsyncKeyState, CDC::GetDeviceCaps, ON_UPDATE_COMMAND_UI_RANGE, CWnd::OnSizing, __m64, __m128i, CWinApp::OnIdle, _m_from_int, _mm_setzero_si64, _mm_adds_pu16, _mm_subs_pu16, _mm_srli_pi16, _mm_slli_pi16, _mm_and_si64, _mm_or_si64, _mm_andnot_si64, _m_to_int, _mm_packs_pu16, _mm_unpacklo_pi8, _mm_unpackhi_pi8, _mm_loadl_epi64, _mm_setzero_si128, _mm_set1_epi64, _mm_adds_epu16, _mm_subs_epu16, _mm_srli_epi16, _mm_slli_epi16, _mm_and_si128, _mm_or_si128, _mm_andnot_si128, _mm_packus_epi16, _mm_store_si128, _mm_load_si128, _mm_packus_epi16, _mm_unpacklo_epi8, _mm_unpackhi_epi8</p></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :MMXSwarm Sample: Demonstrates CImage and Visual C++ MMX Support">comments</a> about this topic to Microsoft.
      </div></div></body></html>
