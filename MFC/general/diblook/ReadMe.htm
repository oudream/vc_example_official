<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>DIBLOOK Sample: Illustrates the Use of DIBs and Color Palettes</title></head><body><h1>DIBLOOK Sample: Illustrates the Use of DIBs and Color Palettes</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The DIBLOOK sample illustrates the use of device-independent bitmaps (DIB) and the closely related use of color palettes.</p><p>DIBLOOK also illustrates a document that has an externally defined file format (in this case, the DIB file format). This is in contrast to an internally defined file format, which is otherwise implied when the framework automatically calls the document's <b>Serialize</b> function to store the contents of the document on disk. DIBLOOK further illustrates use of the Clipboard, <b>CFile</b>, and scroll views. </p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run the DIBLOOK sample</h4><div class="subSection"><ol><li><p>Open the solution DibLook.sln. </p></li><li><p>On the <b>Build</b> menu, click <b>Build</b>. </p></li><li><p>On the <b>Debug</b> menu, click <b>Start Without Debugging</b>. </p></li></ol></div><p>DIBLOOK is a multiple document interface (MDI) application that lets you view multiple bitmaps at the same time. Use <b>File Open</b> to open an existing device-independent bitmap (.dib) file or device-dependent bitmap (.bmp) file. Alternately, you can create a new bitmap document by copying a bitmap from another application, such as Paint, using the Clipboard, as follows:  </p><ul><li><p>From the other application, copy a bitmap to the Clipboard.</p></li><li><p>Use the DIBLOOK <b>New</b> command on the <b>File</b> menu to create a new bitmap document.</p></li><li><p>Use the <b>Paste</b> command on the <b>Edit</b> menu to copy the bitmap from the Clipboard into the new document.</p></li></ul><p>Although you cannot edit the image in DIBLOOK, you can save the bitmap to another file by using the <b>Save As</b> command on the <b>File</b> menu. The bitmap is saved in device-independent bitmap format, even if its original format was device dependent.</p></div><h1 class="heading">Externally Defined Document Format</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>DIBLOOK reads and stores bitmaps in the standard Windows device-independent bitmap format. While in memory, the bitmap is managed by Windows using an opaque <b>HDIB</b> handle. The internal format of the bitmap is visible to the application. Thus, DIBLOOK's document does not itself store the bitmap bits or the color table. Instead, <b>CDibDoc</b> holds a handle to the DIB (<code>HDIB m_hDIB</code>). DIBLOOK is an application whose document format is defined externally (typically some standard file format standard such as DIB), in contrast to an application whose document format is implicitly defined according to the sequence in which it serializes the document items in the <b>CDocument::Serialize</b> override. </p><p>DIBLOOK does not override <b>CDocument::Serialize</b>. Instead, DIBLOOK overrides <b>CDocument::OnOpenDocument</b> and <b>OnSaveDocument</b>. Both overrides use the <i>pszPathName</i>, passed in by the framework, to open a <b>CFile</b> object and to read or save the DIB. The actual code for reading and saving the DIB file is provided in Myfile.cpp; this code is reusable by any application that needs to read and save DIB files. </p></div><h1 class="heading">Using DIBs and Color Palettes</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>DIBLOOK illustrates how to display a DIB in a window and how to prepare the color palette for the window displaying the DIB. </p><p>After DIBLOOK reads the DIB from a file, it prepares a <b>CPalette</b> object based on the color table of the DIB and stores the palette as <code>m_palhDIB</code> in the <b>CDibDoc</b> object. When DIBLOOK displays the DIB in its <b>CDibView::OnDraw</b>, it calls a Windows <b>::PaintDIB</b> routine implemented in DIBLOOK's Dibapi.cpp file. <b>PaintDIB</b> in turn calls the Windows function <b>::SetDIBitsToDevice</b> or <b>::StretchDIBits</b>, using the color table of the DIB as the color palette. The DIB-displaying routines in Dibapi.cpp are reusable by any application that displays DIBs. </p><p>DIBLOOK selects a color palette that is optimal for the currently active window. DIBLOOK selects a color palette matching the color table of the DIB displayed in the currently active MDI child window. When an application is about to receive the input focus (shifting away from another application), its top-level window receives the <b>WM_QUERYNEWPALETTE</b> message. DIBLOOK's <b>CMainFrame</b> window handles this message by sending an application-defined message, <b>WM_DOREALIZE,</b> to each of the descendant windows. The list of descendant windows includes all the views of the possible multiple opened documents. In turn, each view selects into its display context as a foreground or background palette, depending on whether the view is the active one or not. </p><p>If another application changes the system palette, DIBLOOK receives the <b>WM_PALETTECHANGED</b> message. In this case, the <code>CMainFrame</code> window again sends the application-defined message, <b>WM_DOREALIZE,</b> to each view. Each view selects its palette into the display context as a background palette, however, yielding the foreground palette to the other application.</p><p>When the focus shifts within the application from one view to another, DIBLOOK selects and realizes the palette for the currently active view (see <b>CDibView::OnActivateView</b>). When the new palette is realized, Windows sends the <b>WM_PALETTECHANGED</b> message to all application top-level windows, including those of DIBLOOK. DIBLOOK handles the message by realizing as a background palette the color tables associated with the other DIBs in the other views.</p></div><h1 class="heading">Keywords</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following keywords:</p><p>AfxGetApp; CCmdTarget::BeginWaitCursor; CCmdTarget::EndWaitCursor; CCmdUI::Enable; CDC::RealizePalette; CDC::SelectPalette; CDialog::DoModal; CDocument::DeleteContents; CDocument::OnNewDocument; CDocument::OnOpenDocument; CDocument::OnSaveDocument; CDocument::ReportSaveLoadException; CDocument::SetModifiedFlag; CDocument::SetPathName; CDocument::UpdateAllViews; CFile::Abort; CFile::Close; CFile::GetLength; CFile::Open; CFile::Read; CFile::ReadHuge; CFile::Write; CFile::WriteHuge; CFrameWnd::GetActiveView; CFrameWnd::LoadFrame; CMDIFrameWnd::MDIGetActive; CObject::AssertValid; CObject::Dump; CPalette::CreatePalette; CScrollView::SetScrollSizes; CStatusBar::Create; CStatusBar::SetIndicators; CString::LoadString; CToolBar::Create; CToolBar::LoadBitmap; CToolBar::SetButtons; CView::DoPreparePrinting; CView::GetDocument; CView::OnActivateView; CView::OnDraw; CView::OnInitialUpdate; CView::OnPreparePrinting; CWinApp::AddDocTemplate; CWinApp::EnableShellOpen; CWinApp::InitInstance; CWinApp::LoadStdProfileSettings; CWinApp::RegisterShellFileTypes; CWnd::DoDataExchange; CWnd::OnCreate; CWnd::OnPaletteChanged; CWnd::OnQueryNewPalette; CWnd::OpenClipboard; CWnd::SendMessage; CWnd::SendMessageToDescendants; CWnd::ShowWindow; CWnd::UpdateWindow; CloseClipboard; DragAcceptFiles; EmptyClipboard; GetClipboardData; GetDeviceCaps; GlobalAlloc; GlobalFree; GlobalLock; GlobalSize; GlobalUnlock; IsClipboardFormatAvailable; MessageBox; SelectPalette; SetClipboardData; SetDIBitsToDevice; SetStretchBltMode; StretchDIBits; memcpy</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :DIBLOOK Sample: Illustrates the Use of DIBs and Color Palettes">comments</a> about this topic to Microsoft.
      </div></div></body></html>
