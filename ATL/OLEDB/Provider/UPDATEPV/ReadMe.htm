<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>UpdatePV Sample: Implements an Updatable OLE DB Provider</title></head><body><h1>UpdatePV Sample: Implements an Updatable OLE DB Provider</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The UpdatePV sample is an OLE DB Provider Templates sample that demonstrates how to implement an updatable (read/write) provider. Specifically, it demonstrates how to perform immediate and deferred inserts/updates/deletes. UpdatePV also demonstrates how to use schema rowsets (which make it easier for some wizards to interact with a provider). It is a superset of the <MSHelp:link keywords="A1191DA4-EA91-4C26-B32E-E439CD6242E8" tabindex="0" >MyProv</MSHelp:link> sample (a read-only provider). UpdatePV also demonstrates the <b>IRowsetLocateImpl</b> class, as does MyProv.</p><p>See the AdvancedPV sample for illustrations of additional techniques on loading and saving data with a provider.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><p>To demonstrate the sample's intended features, build the sample, create a consumer project with an accessor for the provider, and create a console application to access and output the data.</p><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file UpdatePV.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>.</p></li><li><p>Create a consumer project with the ATL Project wizard (make it an attributed .dll).</p></li><li><p>Add an OLE DB consumer to the consumer project (from <b>Add Class</b>, select <b>ATL OLE DB Consumer</b>).</p></li><li><p>In the ATL OLE DB Consumer wizard, click the <b>Data Source</b> button and in <b>Data Link Properties</b>, select <b>UpProv OLE DB Provider</b>. (The <b>UpProv</b> provider should be registered automatically when you build UpdatePV, but if you don't see it listed here, run regsvr32.exe on UpdatePV.dll.)</p></li><li><p>Click <b>Next</b> to go to the <b>Connection</b> tab, then under <b>Enter the initial catalog to use</b>, make sure the path name to MyData.txt is correct.</p></li><li><p>Click <b>Ok</b>. The <b>Select Database Object</b> dialog will appear, then open <b>Tables</b>; there is only one item: the path name for MyData.txt. Select it and click <b>OK</b>. You return to the ATL OLE DB Consumer wizard.</p></li><li><p>In the ATL OLE DB Consumer wizard, select <b>Table</b>, rename the class to something shorter (if necessary) such as <code>CMyCons</code>, and click <b>Finish</b>.</p></li><li><p>Dismiss the security warning dialog that pops up by pressing <b>OK</b>. </p></li><li><p>Remove this line from CMyCons.h:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>#error Security Issue: The connection string may contain a password</pre></td></tr></table></span></div><p>This line will prevent compilation, but is inserted to alert you to the fact that (in real-world scenarios) sensitive information should be protected.</p></li><li><p>Build the consumer project by right-clicking on the project's node in the <b>Solution Explorer</b> and clicking <b>Build</b>.</p></li><li><p>Create a new console application. In the .cpp file, include the consumer header and modify the code as follows: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>#include "stdafx.h"
#include &lt;atldbcli.h&gt;
#include "..\consumer\cmycons.h"

int _tmain(int argc, _TCHAR* argv[])
{
   HRESULT hr = CoInitialize(NULL);

   CMyCons c;

   hr = c.OpenAll();
   ATLASSERT( SUCCEEDED( hr ) );

   hr = c.MoveFirst();
   while( SUCCEEDED(hr) &amp;&amp; hr != DB_S_ENDOFROWSET )
   {
      printf( "%d %s %s %s %s\n", c.m_Fixed, c.m_Command, c.m_Text, 
         c.m_Command2, c.m_Text2 );
      hr = c.MoveNext();
   }

   c.CloseAll();
   CoUninitialize();
   return 0;
}</pre></td></tr></table></span></div></li><li><p>Place a breakpoint on the <b>CoUninitialize</b> function; this will make the console stay open so you can view the results. Run the console application from the development environment by clicking the <b>Start</b> button. You should see five columns of text printed out (one index column and four text columns).</p></li></ol></div></div><h1 class="heading">How the Sample Works</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>UpdatePV is built on top of the C run-time file I/O functions. This represents a data store. Specifically, the sample takes a text file consisting of a pair of data elements and turns it into a rowset. The sample comes with a text file, MyData.txt, that contains pairs of data elements. However, you can run it against any text file (it will just parse everything into two-word tuples).</p><p>UpdatePV performs its read operations with <b>RUpdateRowset::Execute</b> (rowset.h). The write operations are handled with <b>RUpdateRowset::FlushData</b> (rowset.h). These are functions called by the OLE DB Provider Templates as part of the normal provider operation. The sample uses the OLE DB Provider Templates <b>IRowsetChangeImpl</b> and <b>IRowsetUpdateImpl</b> classes. The <b>IRowsetChangeImpl</b> class provides support for immediate inserts/updates/deletes. The <b>IRowsetUpdateImpl</b> class support deferred inserts/updates/deletes. The <b>IRowsetUpdateImpl</b> class inherits from <b>IRowsetChangeImpl</b>. For more information on getting/setting data, read <MSHelp:link keywords="BDFD5C9F-1C6F-4098-822C-DD650E70AB82" tabindex="0" >Creating an Updatable Provider</MSHelp:link> in the Visual C++ documentation, and <MSHelp:link keywords="oledbUpdating_Data_in_Rowsets" tabindex="0" >Updating Data in Rowsets</MSHelp:link> in the <i>OLE DB Programmer's Reference</i> in the Platform SDK documentation.</p><p>UpdatePV also provides support for schema rowsets. These schema rowsets allow consumers to find out information about a provider without opening a rowset or executing a command. The Visual C++ wizards use schema rowsets to generate client side accessors. The primary functions are <b>CUpdateSessionTRSchemaRowset::Execute</b>, <b>CUpdateSessionColSchemaRowset::Execute</b>, and <b>CUpdateSessionPTSchemaRowset::Execute</b>. All three functions return information on what tables the provider supports, columns on the tables, and the data types on the tables. For further information on schema rowsets, see the <b>IDBSchemaRowset</b> interface in the <i>OLE DB Programmer's Reference</i>.</p></div><h1 class="heading">Keywords</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>The sample demonstrates the following interfaces:</p><p>IRowsetChange, IRowsetUpdateImpl</p><p>The sample demonstrates the following properties:</p><p>DBPROP_IRowsetChange, DBPROP_IRowsetUpdate</p></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :UpdatePV Sample: Implements an Updatable OLE DB Provider">comments</a> about this topic to Microsoft.
      </div></div></body></html>
