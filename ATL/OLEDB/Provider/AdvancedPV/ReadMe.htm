<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>AdvancedPV Sample: Demonstrates Advanced Provider Techniques</title></head><body><h1>AdvancedPV Sample: Demonstrates Advanced Provider Techniques</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The AdvancedPV sample is very similar to UpdatePV, but it demonstrates some advanced techniques.</p><p>Normally providers written using OLE DB Templates use <b>CAtlArray</b> for data storage. The OLE DB Provider Templates call a user-provided <code>Execute</code> method to populate the array (for example, to load all of the rows from the data file into the array). Another user-provided method, <code>FlushData</code>, is used to save the contents of the array (for example, to write the array contents back into the data file).The problem with this approach is that in <code>Execute</code> you have to load all of the rows in the rowset, and in <code>FlushData</code> you have to save all of the rows at the same time. If there is a large number of rows in the rowset, all of the data needs to be stored in memory (in the <b>CAtlArray</b> object).</p><p>AdvancedPV demonstrates how to use a special array class in place of the default <b>CAtlArray</b> array to make the provider load and save rows as necessary. The rows will be loaded from the data file only when they are actually requested (through a specially implemented <code>operator[]</code>) and the changes will be written back to the file as soon as the array contents change.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file AdvancedPV.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build</b>.</p></li><li><p>Create a Win32 Console application with the Win32 Project wizard. Give it ATL support.</p></li><li><p>Add an OLE DB consumer to the project (from <b>Add Class</b>, select <b>ATL OLE DB Consumer</b>).</p></li><li><p>In the ATL OLE DB Consumer wizard, click the <b>Data Source</b> button and in <b>Data Link Properties</b>, select <b>AdvancedProv Provider</b>. (The <b>AdvancedProv</b> provider should be registered automatically when you build AdvancedPV, but if you don't see it listed here, run regsvr32.exe on AdvancedPV.dll.)</p></li><li><p>Click <b>Next</b> to go to the <b>Connection</b> tab, then under <b>Enter the initial catalog to use</b>, specify the initial catalog to use (the path to DataFile.dat).</p></li><li><p>Under <b>Select Database Object</b>, open <b>Tables</b>; there is only one item (the path to DataFile.dat). Select it and click <b>OK</b>. When you return to the ATL OLE DB Consumer wizard, select <b>Table</b>, rename the class to something shorter (if necessary) such as <code>CMyCons</code>, and click <b>Finish</b>. Build the consumer project.</p></li><li><p>Add the following to your project's main code: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre><b>#include "MyCons.h" </b>
 
int main( int argc, char* argv[] )
{
   // Add this code
<b>   HRESULT hr = CoInitialize(NULL);</b><b>   CMyCons rs;</b><b>   hr = rs.OpenAll();</b><b>   ATLASSERT( SUCCEEDED(hr));</b><b>   hr = rs.MoveFirst();</b><b>   while( SUCCEEDED(hr) &amp;&amp; hr != DB_S_ENDOFROWSET )</b><b>   {</b><b>      printf( "%d %s %s %s %s\n", rs.m_Fixed, rs.m_Command, rs.m_Text, </b><b>      rs.m_Command2, rs.m_Text2 );</b><b>      hr = rs.MoveNext();</b><b>   }</b><b>   rs.CloseAll();</b><b>   CoUninitialize();</b><b>   return 0;</b>
}</pre></td></tr></table></span></div></li><li><p>Put a breakpoint on the <b>CoUninitialize</b> function; this will make the console stay open so you can view the results. Run the application by clicking the <b>Start</b> button (or click <b>Start Without Debugging</b> from the <b>Debug</b> menu). You should see five columns of text printed out (one index and four text columns).</p></li></ol></div></div><h1 class="heading">Keywords</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>This sample uses the following interfaces:</p><p>IRowsetLocateImpl, IRowsetScroll, IRowsetScrollImpl, IRowsetUpdateImpl, IConnectionPointContainerImpl, IRowsetNotifyCP, IDBCreateSessionImpl, IDBInitializeImpl, IDBPropertiesImpl, IPersistImpl, IInternalConnectionImpl, IGetDataSourceImpl, IOpenRowsetImpl, ISessionPropertiesImpl, IObjectWithSiteSessionImpl, IDBSchemaRowsetImpl, IDBCreateCommandImpl, IAccessorImpl, ICommandTextImpl, ICommandPropertiesImpl, IObjectWithSiteImpl, IConvertTypeImpl, IColumnsInfoImpl, IInternalCommandConnectionImpl</p><p>The sample demonstrates the following classes:</p><p>CSchemaRowsetImpl, CComObjectRootEx, CComObjectRootEx, CRowsetImpl, CFileArray, CSimpleRow</p><p>The sample demonstrates the following macros:</p><p>COM_INTERFACE_ENTRY, PROPERTY_INFO_ENTRY</p></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :AdvancedPV Sample: Demonstrates Advanced Provider Techniques">comments</a> about this topic to Microsoft.
      </div></div></body></html>
