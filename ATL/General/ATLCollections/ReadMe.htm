<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>ATLCollections Sample: Demonstrates ICollectionOnSTLImpl, CComEnumOnSTL, and Custom Copy Policy Classes</title></head><body><h1>ATLCollections Sample: Demonstrates ICollectionOnSTLImpl, CComEnumOnSTL, and Custom Copy Policy Classes</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The ATLCollections sample demonstrates the use of <b>ICollectionOnSTLImpl</b> and <b>CComEnumOnSTL</b>, and the implementation of custom copy policy classes.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file ATLCollections.sln.</p></li><li><p>From the Build menu, click <b>Build Solution</b>.</p></li><li><p>From the <b>Debug</b> menu, click <b>Start Without Debugging</b>. This will test the collections using the supplied C++ client. This client outputs the content of the collections to a command window by looping through using the <code>Count</code> and <code>Item</code> properties and by enumerating the items using the <code>_NewEnum</code> property. The <code>Add</code>, <code>Remove</code>, and <code>Clear</code> methods of the <code>IItems</code> interface are also tested.</p></li></ol></div></div><h1 class="heading">About the Sample</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>This project implements two COM collections based on data stored in STL containers:  </p><ul><li><p>The simpler of the two classes, <code>CWords</code>, is a read-only <b>BSTR</b> collection based on data stored as <b>std::string</b>s in a <b>std::vector</b>. This class uses the custom copy policy class <code>VCUE::GenericCopy</code>, defined in VCUE_Copy.h and VCUE_CopyString.h, to convert the data from <b>std::string</b>s to the type appropriate for the collection or enumerator interface.</p></li><li><p>The second class, <code>CItems</code>, is a read-write <b>VARIANT</b> collection based on data stored in a <b>std::map</b>. The <b>CComVariant</b> data in the map uses <b>CComBSTR</b>s (actually <b>CAdapt&lt;CComBSTR&gt;</b>s) as the keys. This class uses the custom copy policy class <code>VCUE::MapCopy</code>, defined in VCUE_Copy.h, to convert the stored data to <b>VARIANT</b>s that can be passed back to COM clients. <code>CItems</code> derives from class <code>VCUE::ICollectionOnSTLCopyImpl</code>, defined in VCUE_Collections.h. The latter class derives from <b>ICollectionOnSTLImpl</b> and overrides <b>get__NewEnum</b> so that each enumerator has its own copy of the collection data. <code>CItems</code> implements the <code>Add</code>, <code>Remove</code>, and <code>Clear</code> methods in the collection interface.</p></li></ul></div><h1 class="heading">Keywords</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample uses the following keywords:</p><p>_Copy, CComEnumOnSTL, ICollectionOnSTLImpl, CAdapt, IEnumVARIANT, std::map, std::string, std::vector</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some of the samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :ATLCollections Sample: Demonstrates ICollectionOnSTLImpl, CComEnumOnSTL, and Custom Copy Policy Classes">comments</a> about this topic to Microsoft.
      </div></div></body></html>
